// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package meta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChannelOperatorClient is the client API for ChannelOperator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChannelOperatorClient interface {
	// Performs a Channel create operation
	CreateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelReply, error)
	// Performs a Channel delete operation
	DeleteChannel(ctx context.Context, in *ChannelDescription, opts ...grpc.CallOption) (*ChannelReply, error)
	// Performs a Channel update operation
	UpdateChannel(ctx context.Context, in *ChannelWithDescription, opts ...grpc.CallOption) (*ChannelReply, error)
	// Performs a Channel search / recover operation
	GetChannel(ctx context.Context, in *ChannelDescription, opts ...grpc.CallOption) (*Channel, error)
	// Performs a Channel list operation
	ListChannels(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*ChannelDescriptionArray, error)
}

type channelOperatorClient struct {
	cc grpc.ClientConnInterface
}

func NewChannelOperatorClient(cc grpc.ClientConnInterface) ChannelOperatorClient {
	return &channelOperatorClient{cc}
}

func (c *channelOperatorClient) CreateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelReply, error) {
	out := new(ChannelReply)
	err := c.cc.Invoke(ctx, "/meta.ChannelOperator/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOperatorClient) DeleteChannel(ctx context.Context, in *ChannelDescription, opts ...grpc.CallOption) (*ChannelReply, error) {
	out := new(ChannelReply)
	err := c.cc.Invoke(ctx, "/meta.ChannelOperator/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOperatorClient) UpdateChannel(ctx context.Context, in *ChannelWithDescription, opts ...grpc.CallOption) (*ChannelReply, error) {
	out := new(ChannelReply)
	err := c.cc.Invoke(ctx, "/meta.ChannelOperator/UpdateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOperatorClient) GetChannel(ctx context.Context, in *ChannelDescription, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/meta.ChannelOperator/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelOperatorClient) ListChannels(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*ChannelDescriptionArray, error) {
	out := new(ChannelDescriptionArray)
	err := c.cc.Invoke(ctx, "/meta.ChannelOperator/ListChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChannelOperatorServer is the server API for ChannelOperator service.
// All implementations must embed UnimplementedChannelOperatorServer
// for forward compatibility
type ChannelOperatorServer interface {
	// Performs a Channel create operation
	CreateChannel(context.Context, *Channel) (*ChannelReply, error)
	// Performs a Channel delete operation
	DeleteChannel(context.Context, *ChannelDescription) (*ChannelReply, error)
	// Performs a Channel update operation
	UpdateChannel(context.Context, *ChannelWithDescription) (*ChannelReply, error)
	// Performs a Channel search / recover operation
	GetChannel(context.Context, *ChannelDescription) (*Channel, error)
	// Performs a Channel list operation
	ListChannels(context.Context, *Stub) (*ChannelDescriptionArray, error)
	mustEmbedUnimplementedChannelOperatorServer()
}

// UnimplementedChannelOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedChannelOperatorServer struct {
}

func (UnimplementedChannelOperatorServer) CreateChannel(context.Context, *Channel) (*ChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChannelOperatorServer) DeleteChannel(context.Context, *ChannelDescription) (*ChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedChannelOperatorServer) UpdateChannel(context.Context, *ChannelWithDescription) (*ChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedChannelOperatorServer) GetChannel(context.Context, *ChannelDescription) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedChannelOperatorServer) ListChannels(context.Context, *Stub) (*ChannelDescriptionArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedChannelOperatorServer) mustEmbedUnimplementedChannelOperatorServer() {}

// UnsafeChannelOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChannelOperatorServer will
// result in compilation errors.
type UnsafeChannelOperatorServer interface {
	mustEmbedUnimplementedChannelOperatorServer()
}

func RegisterChannelOperatorServer(s grpc.ServiceRegistrar, srv ChannelOperatorServer) {
	s.RegisterService(&_ChannelOperator_serviceDesc, srv)
}

func _ChannelOperator_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOperatorServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.ChannelOperator/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOperatorServer).CreateChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOperator_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOperatorServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.ChannelOperator/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOperatorServer).DeleteChannel(ctx, req.(*ChannelDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOperator_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelWithDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOperatorServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.ChannelOperator/UpdateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOperatorServer).UpdateChannel(ctx, req.(*ChannelWithDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOperator_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOperatorServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.ChannelOperator/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOperatorServer).GetChannel(ctx, req.(*ChannelDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChannelOperator_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelOperatorServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.ChannelOperator/ListChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelOperatorServer).ListChannels(ctx, req.(*Stub))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChannelOperator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meta.ChannelOperator",
	HandlerType: (*ChannelOperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _ChannelOperator_CreateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChannelOperator_DeleteChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _ChannelOperator_UpdateChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _ChannelOperator_GetChannel_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _ChannelOperator_ListChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel.proto",
}
