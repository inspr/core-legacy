//package meta

/*
import v1 "k8s.io/api/core/v1"

// Metadata represents an arbitrary inspr component. It represents this components' ID inside the cluster and the hub.
// Annotations can be used as query methods for getting components inside Inspr, just like kubernetes' annotations.
//
// The parent field represents the parent app of the object.
// The full reference for this component will be {it's parent's reference}.Name
type Metadata struct {
	Name        string       `yaml:"name" json:"name"`
	Reference   string       `yaml:"reference" json:"reference"`
	Annotations []Annotation `yaml:"annotations" json:"annotations"`
	Parent      string       `yaml:"parent" json:"parent"`
	SHA256      string
}

// Annotation is a representation of annotations for metadata
type Annotation struct {
	Name  string
	Value string
}

// AppBoundary represents the connections this app can make to other apps. These are the fields that can be overriten
// by the ChannelAliases when instantiating the app.
type AppBoundary struct {
	Input  []string `yaml:"input" json:"input"`
	Output []string `yaml:"output" json:"output"`
}

// AppSpec represents the configuration of an App.
//
// The app contains a list of apps and a list of nodes. The apps and nodes can be dereferenced by it's metadata
// reference, at CLI time.
//
// The boundary represent the possible connections to other apps, and the fields that can be overriten when instantiating the app.
type AppSpec struct {
	Node     Node        `yaml:"node" json:"node"`
	Apps     []*App      `yaml:"apps" json:"apps"`
	Channels []*Channel  `yaml:"channels" json:"channels"`
	Boundary AppBoundary `yaml:"boundary" json:"boundary"`
}

// App is an inspr component that represents an App. An App can contain other apps, channels and other components.
type App struct {
	Metadata `yaml:"metadata" json:"metadata"`
	Spec     AppSpec `yaml:"spec" json:"spec"`
}

// ChannelType is the type of the channel. It can be a reference to an outsourced type or can be a local type. This local
// type will be defined via the workspace and instantiated as a []byte on the cluster
type ChannelType struct {
	Reference     string `yaml:"reference" json:"reference,omitempty"  json:"reference"`
	FileReference string `yaml:"fileReference"  json:"fileReference"`
	Schema        []byte `yaml:"schema" json:"schema,omitempty"  json:"schema"`
}

// ChannelSpec is the specification of a channel. (the external variable is just an idea)
type ChannelSpec struct {
	Type     ChannelType `yaml:"type"  json:"type"`
	External bool        `yaml:"external"  json:"external"`
}

// Channel is an Inspr component that represents a Channel. The channel can be instantiated by using a reference to either
// a local file or an URL to an uploaded file.
type Channel struct {
	Meta Metadata    `yaml:"meta"  json:"meta"`
	Spec ChannelSpec `yaml:"spec"  json:"spec"`
}

// NodeSpec represents a configuration for a node. The image represents the Docker image for the main container of the Node.
// If the node has an specific Kubernetes configuration, the configuration can be injected via the Kubernetes field. When
// Kubernetes is set, the Image field gets igored.
type NodeSpec struct {
	Image      string     `yaml:"image"  json:"image"`
	Kubernetes v1.PodSpec `yaml:"kubernetes"  json:"kubernetes"`
}

// Node represents an inspr component that is a node.
type Node struct {
	Meta Metadata `yaml:"meta"  json:"meta"`
	Spec NodeSpec `yaml:"spec"  json:"spec"`
}
*/
