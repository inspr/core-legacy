// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package meta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NodeOperatorClient is the client API for NodeOperator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeOperatorClient interface {
	// Performs a node create operation
	CreateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeReply, error)
	// Performs a node de;ete operation
	DeleteNode(ctx context.Context, in *NodeDescription, opts ...grpc.CallOption) (*NodeReply, error)
	// Performs a node update operation
	UpdateNode(ctx context.Context, in *NodeWithDescription, opts ...grpc.CallOption) (*NodeReply, error)
	// Performs a node search / recover operation
	GetNode(ctx context.Context, in *NodeDescription, opts ...grpc.CallOption) (*NodeDescription, error)
	// Performs a node list operation
	ListNodes(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*NodeDescriptionArray, error)
	// Returns the node status for each app
	UpdateNodeStatus(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*NodeStatus, error)
}

type nodeOperatorClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeOperatorClient(cc grpc.ClientConnInterface) NodeOperatorClient {
	return &nodeOperatorClient{cc}
}

func (c *nodeOperatorClient) CreateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*NodeReply, error) {
	out := new(NodeReply)
	err := c.cc.Invoke(ctx, "/meta.NodeOperator/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeOperatorClient) DeleteNode(ctx context.Context, in *NodeDescription, opts ...grpc.CallOption) (*NodeReply, error) {
	out := new(NodeReply)
	err := c.cc.Invoke(ctx, "/meta.NodeOperator/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeOperatorClient) UpdateNode(ctx context.Context, in *NodeWithDescription, opts ...grpc.CallOption) (*NodeReply, error) {
	out := new(NodeReply)
	err := c.cc.Invoke(ctx, "/meta.NodeOperator/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeOperatorClient) GetNode(ctx context.Context, in *NodeDescription, opts ...grpc.CallOption) (*NodeDescription, error) {
	out := new(NodeDescription)
	err := c.cc.Invoke(ctx, "/meta.NodeOperator/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeOperatorClient) ListNodes(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*NodeDescriptionArray, error) {
	out := new(NodeDescriptionArray)
	err := c.cc.Invoke(ctx, "/meta.NodeOperator/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeOperatorClient) UpdateNodeStatus(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*NodeStatus, error) {
	out := new(NodeStatus)
	err := c.cc.Invoke(ctx, "/meta.NodeOperator/UpdateNodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeOperatorServer is the server API for NodeOperator service.
// All implementations must embed UnimplementedNodeOperatorServer
// for forward compatibility
type NodeOperatorServer interface {
	// Performs a node create operation
	CreateNode(context.Context, *Node) (*NodeReply, error)
	// Performs a node de;ete operation
	DeleteNode(context.Context, *NodeDescription) (*NodeReply, error)
	// Performs a node update operation
	UpdateNode(context.Context, *NodeWithDescription) (*NodeReply, error)
	// Performs a node search / recover operation
	GetNode(context.Context, *NodeDescription) (*NodeDescription, error)
	// Performs a node list operation
	ListNodes(context.Context, *Stub) (*NodeDescriptionArray, error)
	// Returns the node status for each app
	UpdateNodeStatus(context.Context, *Stub) (*NodeStatus, error)
	mustEmbedUnimplementedNodeOperatorServer()
}

// UnimplementedNodeOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedNodeOperatorServer struct {
}

func (UnimplementedNodeOperatorServer) CreateNode(context.Context, *Node) (*NodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedNodeOperatorServer) DeleteNode(context.Context, *NodeDescription) (*NodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedNodeOperatorServer) UpdateNode(context.Context, *NodeWithDescription) (*NodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedNodeOperatorServer) GetNode(context.Context, *NodeDescription) (*NodeDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedNodeOperatorServer) ListNodes(context.Context, *Stub) (*NodeDescriptionArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedNodeOperatorServer) UpdateNodeStatus(context.Context, *Stub) (*NodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeStatus not implemented")
}
func (UnimplementedNodeOperatorServer) mustEmbedUnimplementedNodeOperatorServer() {}

// UnsafeNodeOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeOperatorServer will
// result in compilation errors.
type UnsafeNodeOperatorServer interface {
	mustEmbedUnimplementedNodeOperatorServer()
}

func RegisterNodeOperatorServer(s grpc.ServiceRegistrar, srv NodeOperatorServer) {
	s.RegisterService(&_NodeOperator_serviceDesc, srv)
}

func _NodeOperator_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOperatorServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.NodeOperator/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOperatorServer).CreateNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeOperator_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOperatorServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.NodeOperator/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOperatorServer).DeleteNode(ctx, req.(*NodeDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeOperator_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeWithDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOperatorServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.NodeOperator/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOperatorServer).UpdateNode(ctx, req.(*NodeWithDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeOperator_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOperatorServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.NodeOperator/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOperatorServer).GetNode(ctx, req.(*NodeDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeOperator_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOperatorServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.NodeOperator/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOperatorServer).ListNodes(ctx, req.(*Stub))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeOperator_UpdateNodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeOperatorServer).UpdateNodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.NodeOperator/UpdateNodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeOperatorServer).UpdateNodeStatus(ctx, req.(*Stub))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeOperator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meta.NodeOperator",
	HandlerType: (*NodeOperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _NodeOperator_CreateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NodeOperator_DeleteNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _NodeOperator_UpdateNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _NodeOperator_GetNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _NodeOperator_ListNodes_Handler,
		},
		{
			MethodName: "UpdateNodeStatus",
			Handler:    _NodeOperator_UpdateNodeStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
