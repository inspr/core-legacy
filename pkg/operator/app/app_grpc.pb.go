// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OperatorClient is the client API for Operator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorClient interface {
	// Performs a App create operation
	CreateApp(ctx context.Context, in *AppDescription, opts ...grpc.CallOption) (*AppReply, error)
	// Performs a App de;ete operation
	DeleteApp(ctx context.Context, in *AppID, opts ...grpc.CallOption) (*AppReply, error)
	// Performs a App update operation
	UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppReply, error)
	// Performs a App search / recover operation
	GetApp(ctx context.Context, in *AppID, opts ...grpc.CallOption) (*AppDescription, error)
	// Performs a App list operation
	ListApps(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*AppDescriptionArray, error)
}

type operatorClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorClient(cc grpc.ClientConnInterface) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) CreateApp(ctx context.Context, in *AppDescription, opts ...grpc.CallOption) (*AppReply, error) {
	out := new(AppReply)
	err := c.cc.Invoke(ctx, "/comunication.Operator/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) DeleteApp(ctx context.Context, in *AppID, opts ...grpc.CallOption) (*AppReply, error) {
	out := new(AppReply)
	err := c.cc.Invoke(ctx, "/comunication.Operator/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) UpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*AppReply, error) {
	out := new(AppReply)
	err := c.cc.Invoke(ctx, "/comunication.Operator/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetApp(ctx context.Context, in *AppID, opts ...grpc.CallOption) (*AppDescription, error) {
	out := new(AppDescription)
	err := c.cc.Invoke(ctx, "/comunication.Operator/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListApps(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*AppDescriptionArray, error) {
	out := new(AppDescriptionArray)
	err := c.cc.Invoke(ctx, "/comunication.Operator/ListApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServer is the server API for Operator service.
// All implementations must embed UnimplementedOperatorServer
// for forward compatibility
type OperatorServer interface {
	// Performs a App create operation
	CreateApp(context.Context, *AppDescription) (*AppReply, error)
	// Performs a App de;ete operation
	DeleteApp(context.Context, *AppID) (*AppReply, error)
	// Performs a App update operation
	UpdateApp(context.Context, *App) (*AppReply, error)
	// Performs a App search / recover operation
	GetApp(context.Context, *AppID) (*AppDescription, error)
	// Performs a App list operation
	ListApps(context.Context, *Stub) (*AppDescriptionArray, error)
	mustEmbedUnimplementedOperatorServer()
}

// UnimplementedOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorServer struct {
}

func (UnimplementedOperatorServer) CreateApp(context.Context, *AppDescription) (*AppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedOperatorServer) DeleteApp(context.Context, *AppID) (*AppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedOperatorServer) UpdateApp(context.Context, *App) (*AppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedOperatorServer) GetApp(context.Context, *AppID) (*AppDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedOperatorServer) ListApps(context.Context, *Stub) (*AppDescriptionArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedOperatorServer) mustEmbedUnimplementedOperatorServer() {}

// UnsafeOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServer will
// result in compilation errors.
type UnsafeOperatorServer interface {
	mustEmbedUnimplementedOperatorServer()
}

func RegisterOperatorServer(s grpc.ServiceRegistrar, srv OperatorServer) {
	s.RegisterService(&_Operator_serviceDesc, srv)
}

func _Operator_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).CreateApp(ctx, req.(*AppDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).DeleteApp(ctx, req.(*AppID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).UpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetApp(ctx, req.(*AppID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListApps(ctx, req.(*Stub))
	}
	return interceptor(ctx, in, info, handler)
}

var _Operator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comunication.Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Operator_CreateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _Operator_DeleteApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Operator_UpdateApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _Operator_GetApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _Operator_ListApps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app.proto",
}
