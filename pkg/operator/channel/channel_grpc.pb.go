// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OperatorClient is the client API for Operator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorClient interface {
	// Performs a Channel create operation
	CreateChannel(ctx context.Context, in *ChannelDescription, opts ...grpc.CallOption) (*ChannelReply, error)
	// Performs a Channel de;ete operation
	DeleteChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*ChannelReply, error)
	// Performs a Channel update operation
	UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelReply, error)
	// Performs a Channel search / recover operation
	GetChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*ChannelDescription, error)
	// Performs a Channel list operation
	ListChannels(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*ChannelDescriptionArray, error)
}

type operatorClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorClient(cc grpc.ClientConnInterface) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) CreateChannel(ctx context.Context, in *ChannelDescription, opts ...grpc.CallOption) (*ChannelReply, error) {
	out := new(ChannelReply)
	err := c.cc.Invoke(ctx, "/comunication.Operator/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) DeleteChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*ChannelReply, error) {
	out := new(ChannelReply)
	err := c.cc.Invoke(ctx, "/comunication.Operator/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) UpdateChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ChannelReply, error) {
	out := new(ChannelReply)
	err := c.cc.Invoke(ctx, "/comunication.Operator/UpdateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) GetChannel(ctx context.Context, in *ChannelID, opts ...grpc.CallOption) (*ChannelDescription, error) {
	out := new(ChannelDescription)
	err := c.cc.Invoke(ctx, "/comunication.Operator/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) ListChannels(ctx context.Context, in *Stub, opts ...grpc.CallOption) (*ChannelDescriptionArray, error) {
	out := new(ChannelDescriptionArray)
	err := c.cc.Invoke(ctx, "/comunication.Operator/ListChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServer is the server API for Operator service.
// All implementations must embed UnimplementedOperatorServer
// for forward compatibility
type OperatorServer interface {
	// Performs a Channel create operation
	CreateChannel(context.Context, *ChannelDescription) (*ChannelReply, error)
	// Performs a Channel de;ete operation
	DeleteChannel(context.Context, *ChannelID) (*ChannelReply, error)
	// Performs a Channel update operation
	UpdateChannel(context.Context, *Channel) (*ChannelReply, error)
	// Performs a Channel search / recover operation
	GetChannel(context.Context, *ChannelID) (*ChannelDescription, error)
	// Performs a Channel list operation
	ListChannels(context.Context, *Stub) (*ChannelDescriptionArray, error)
	mustEmbedUnimplementedOperatorServer()
}

// UnimplementedOperatorServer must be embedded to have forward compatible implementations.
type UnimplementedOperatorServer struct {
}

func (UnimplementedOperatorServer) CreateChannel(context.Context, *ChannelDescription) (*ChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedOperatorServer) DeleteChannel(context.Context, *ChannelID) (*ChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedOperatorServer) UpdateChannel(context.Context, *Channel) (*ChannelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedOperatorServer) GetChannel(context.Context, *ChannelID) (*ChannelDescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedOperatorServer) ListChannels(context.Context, *Stub) (*ChannelDescriptionArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedOperatorServer) mustEmbedUnimplementedOperatorServer() {}

// UnsafeOperatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServer will
// result in compilation errors.
type UnsafeOperatorServer interface {
	mustEmbedUnimplementedOperatorServer()
}

func RegisterOperatorServer(s grpc.ServiceRegistrar, srv OperatorServer) {
	s.RegisterService(&_Operator_serviceDesc, srv)
}

func _Operator_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).CreateChannel(ctx, req.(*ChannelDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).DeleteChannel(ctx, req.(*ChannelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/UpdateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).UpdateChannel(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).GetChannel(ctx, req.(*ChannelID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stub)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comunication.Operator/ListChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).ListChannels(ctx, req.(*Stub))
	}
	return interceptor(ctx, in, info, handler)
}

var _Operator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comunication.Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _Operator_CreateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _Operator_DeleteChannel_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _Operator_UpdateChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _Operator_GetChannel_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _Operator_ListChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "channel/channel.proto",
}
